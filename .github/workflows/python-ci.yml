name: Python CI

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  K8S_NAMESPACE: python-boardgames-api

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      BRANCH_NAME: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4 
      with:
        python-version: '3.x'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
      working-directory: python-boardgames-api

    - name: Install dependencies
      run: |
        poetry install
      working-directory: python-boardgames-api

    - name: Run install-build.py with --skip-install-poetry to build image
      run: |
        python install-build.py --skip-install-poetry
      working-directory: python-boardgames-api  

    - name: Run tests
      run: |
        poetry run pytest
      working-directory: python-boardgames-api

    - name: Extract branch name
      id: extract_branch
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          echo "::set-output name=branch_name::${{ github.head_ref }}"
        else
          echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "::set-output name=branch_name::${{ github.ref_name }}"
        fi
    
    - name: Display branch name
      run: echo "Branch name is ${{ env.BRANCH_NAME }}"    


  build-image-push:
    runs-on: ubuntu-latest
    needs: build

    env:
      BRANCH_NAME: ${{ needs.build.outputs.branch_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Docker registry
      run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Display branch name
      run: echo "Branch name is ${{ env.BRANCH_NAME }}" 
      
    - name: Build Docker image
      run: |
        docker build -t python-boardgames-api:${{ env.BRANCH_NAME }} .
      working-directory: python-boardgames-api  

    - name: Tag Docker image
      run: |
        docker tag python-boardgames-api:${{ env.BRANCH_NAME }} ghcr.io/${{ github.repository }}/python-boardgames-api:${{ env.BRANCH_NAME }}

    - name: Push Docker image to GitHub Packages
      run: |
        docker push ghcr.io/${{ github.repository }}/python-boardgames-api:${{ env.BRANCH_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-image-push

    env:
      GKE_CLUSTER_NAME: ${{ vars.GKE_CLUSTER_NAME }}
      GKE_CLUSTER_ZONE: ${{ vars.GKE_CLUSTER_ZONE }}
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Install gke-gcloud-auth-plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin

    - name: Configure kubectl
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: "True"
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} --zone ${{ env.GKE_CLUSTER_ZONE }} --project ${{ env.GCP_PROJECT_ID }}

    - name: Check if Docker registry secret exists
      id: check_secret
      run: |
        kubectl get secret ghcr-secret --namespace=${{ env.K8S_NAMESPACE }} || echo "Secret does not exist"

    - name: Create Docker registry secret
      if: steps.check_secret.outputs.secret_exists == 'false'
      run: |
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=ghcr.io \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GHCR_PAT }} \
          --docker-email=${{ github.actor }}@users.noreply.github.com \
          --namespace=${{ env.K8S_NAMESPACE }}

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/test/python-boardgames-api.yml

    - name: Display full image name
      run: echo "Full image name ghcr.io/${{ github.repository }}/python-boardgames-api:${{ env.BRANCH_NAME }}"

    - name: Deploy to GKE
      run: |
        kubectl set image deployment/python-boardgames-api python-boardgames-api=ghcr.io/${{ github.repository }}/python-boardgames-api:${{ env.BRANCH_NAME }} --namespace ${{ env.K8S_NAMESPACE }}

    - name: Check Deployment Status
      run: |
        kubectl rollout status deployment/python-boardgames-api --namespace ${{ env.K8S_NAMESPACE }}

  health-check:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Wait for Service to be Ready
      run: |
        sleep 10

    - name: Check Health Endpoint
      run: |
        EXTERNAL_IP=$(kubectl get service python-boardgames-api-service --namespace=${{ env.K8S_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        curl --fail http://$EXTERNAL_IP:8282/health
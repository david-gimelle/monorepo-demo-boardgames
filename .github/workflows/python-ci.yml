name: Python CI

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  K8S_NAMESPACE: python-boardgames-api
  APP_NAME: python-boardgames-api 
  WORKING_DIR: python-boardgames-api

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      APP_NAME: ${{ env.APP_NAME }}
      WORKING_DIR: ${{ env.WORKING_DIR }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 

    - name: Set up Python
      uses: actions/setup-python@v4 
      with:
        python-version: '3.x'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
      working-directory: python-boardgames-api

    - name: Install dependencies
      run: |
        poetry install --no-root
      working-directory: python-boardgames-api

    - name: Run install-build.py with --skip-install-poetry to build image
      run: |
        python install-build.py --skip-install-poetry
      working-directory: python-boardgames-api  

    - name: Run tests
      run: |
        poetry run pytest
      working-directory: python-boardgames-api  

  call-build-image-push:
        uses: david-gimelle/lab/.github/workflows/build-image-push-to-ghcr.yml@main
        needs: build
        
        with:
          APP_NAME: ${{ needs.build.outputs.APP_NAME }}
          WORKING_DIR: ${{ needs.build.outputs.WORKING_DIR }}
        secrets:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}

  deploy:
    runs-on: ubuntu-latest
    needs: call-build-image-push

    env:
      GKE_CLUSTER_NAME: ${{ vars.GKE_CLUSTER_NAME_TF }}
      GKE_CLUSTER_ZONE: ${{ vars.GKE_CLUSTER_ZONE }}
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      BRANCH_NAME: ''


    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Call composite action to extract branch name
      id: extract-branch-name
      uses: david-gimelle/lab/.github/actions/extract-branch-name@main

    - name: Set branch name from composite action
      run: echo "BRANCH_NAME=${{ steps.extract-branch-name.outputs.branch_name }}" >> $GITHUB_ENV  

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Install gke-gcloud-auth-plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin

    - name: Configure kubectl
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: "True"
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} --zone ${{ env.GKE_CLUSTER_ZONE }} --project ${{ env.GCP_PROJECT_ID }}

    - name: Delete existing Docker registry secret if it exists
      run: |
          kubectl delete secret ghcr-secret --namespace=${{ env.K8S_NAMESPACE }} || echo "Secret does not exist"
  
    - name: Create Docker registry secret
      run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GHCR_PAT }} \
            --docker-email=${{ github.actor }}@users.noreply.github.com \
            --namespace=${{ env.K8S_NAMESPACE }}

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/test/python-boardgames-api.yml

    - name: Display full image name
      run: echo "Full image name ghcr.io/${{ github.repository }}/python-boardgames-api:${{ env.BRANCH_NAME }}"

    - name: Deploy to GKE
      run: |
        kubectl set image deployment/python-boardgames-api python-boardgames-api=ghcr.io/${{ github.repository }}/python-boardgames-api:${{ env.BRANCH_NAME }} --namespace ${{ env.K8S_NAMESPACE }}

    - name: Check Deployment Status
      run: |
        kubectl rollout status deployment/python-boardgames-api --namespace ${{ env.K8S_NAMESPACE }}

    - name: Wait for Service to be Ready
      run: |
        sleep 10
    
    - name: Ping Endpoint
      run: |
          EXTERNAL_IP=$(kubectl get service python-boardgames-api-service --namespace=${{ env.K8S_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl --fail http://$EXTERNAL_IP:8282/ping    

    - name: Check Health Endpoint
      run: |
        EXTERNAL_IP=$(kubectl get service python-boardgames-api-service --namespace=${{ env.K8S_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        curl --fail http://$EXTERNAL_IP:8282/health

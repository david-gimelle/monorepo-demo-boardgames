name: Release

on:
  schedule:
    - cron: '45 8 * * *'  # Runs every Thursday morning UTC
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'The branch to run the release on'
        required: true
        default: 'main'
      new_version:
        description: 'Override the new version manually'
        required: false

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_PAT }}
        ref: main

    - name: Set up Git
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: Check for recent commits
      if: github.event_name == 'schedule'
      id: check_commits
      run: |
        RECENT_COMMITS=$(git log --since="24 hours ago" --oneline)
        echo "Recent commits in the last 24 hours:"
        echo "$RECENT_COMMITS"
        if [ -z "$RECENT_COMMITS" ]; then
          echo "No recent commits in the last 24 hours."
          exit 0
        fi

    - name: Increment Version and Create Tag
      if: github.event_name != 'schedule' || steps.check_commits.outputs.recent_commits != ''
      id: create_tag
      run: |
        # Read the current version from the VERSION file
        VERSION=$(cat VERSION)
        echo "Current version: ${VERSION}"

        # Check if a new version is provided as input
        if [ -n "${{ github.event.inputs.new_version }}" ]; then
          NEW_VERSION="${{ github.event.inputs.new_version }}"
          echo "Overriding with new version: ${NEW_VERSION}"
        else
          # Increment the patch version
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "New version: ${NEW_VERSION}"
        fi

        # Update the VERSION file
        echo "${NEW_VERSION}" > VERSION
        git add VERSION
        git commit -m "Increment version to ${NEW_VERSION}"

        # Create and push the new tag
        TAG_NAME="v${NEW_VERSION}"
        echo "Generated tag name: ${TAG_NAME}"
        echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
        git tag $TAG_NAME
        git push origin $TAG_NAME
        git push origin main

    - name: Create GitHub Release
      if: github.event.inputs.target_branch == 'main'
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: Release ${{ env.TAG_NAME }}
        body: |
          Release notes for ${{ env.TAG_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
